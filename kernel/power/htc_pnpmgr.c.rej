--- kernel/power/htc_pnpmgr.c	2013-06-24 02:50:43.000000000 -0600
+++ kernel/power/htc_pnpmgr.c	2013-08-01 23:37:51.000000000 -0600
@@ -27,6 +27,7 @@
 static struct kobject *apps_kobj;
 static struct kobject *pnpmgr_kobj;
 static struct kobject *adaptive_policy_kobj;
+static struct kobject *sysinfo_kobj;
 static struct kobject *battery_kobj;
 
 #define define_string_show(_name, str_buf)				\
@@ -363,6 +380,11 @@
 	NULL,
 };
 
+static struct attribute *sysinfo_g[] = {
+       &gpu_max_clk_attr.attr,
+       NULL,
+};
+
 static struct attribute *battery_g[] = {
 	&charging_enabled_attr.attr,
 	NULL,
@@ -384,10 +406,36 @@
 	.attrs = apps_g,
 };
 
+static struct attribute_group sysinfo_attr_group = {
+       .attrs = sysinfo_g,
+};
+
 static struct attribute_group battery_attr_group = {
 	.attrs = battery_g,
 };
 
+#ifdef CONFIG_HOTPLUG_CPU
+static int __cpuinit cpu_hotplug_callback(struct notifier_block *nfb, unsigned long action, void *hcpu)
+{
+	switch (action) {
+		
+		case CPU_ONLINE:
+		case CPU_ONLINE_FROZEN:
+			sysfs_notify(hotplug_kobj, NULL, "cpu_hotplug");
+			break;
+		case CPU_DEAD:
+		case CPU_DEAD_FROZEN:
+			break;
+	}
+	return NOTIFY_OK;
+}
+
+static struct notifier_block __refdata cpu_hotplug_notifier = {
+	.notifier_call = cpu_hotplug_callback,
+	.priority = -10, 
+};
+#endif
+
 static unsigned int slack_time_ms;
 static unsigned int step_time_ms;
 static unsigned int max_powersave_bias;
@@ -459,10 +507,11 @@
 	hotplug_kobj = kobject_create_and_add("hotplug", pnpmgr_kobj);
 	thermal_kobj = kobject_create_and_add("thermal", pnpmgr_kobj);
 	apps_kobj = kobject_create_and_add("apps", pnpmgr_kobj);
+	sysinfo_kobj = kobject_create_and_add("sysinfo", pnpmgr_kobj);
 	battery_kobj = kobject_create_and_add("battery", pnpmgr_kobj);
 	adaptive_policy_kobj = kobject_create_and_add("adaptive_policy", power_kobj);
 
-	if (!cpufreq_kobj || !hotplug_kobj || !thermal_kobj || !apps_kobj || !battery_kobj || !adaptive_policy_kobj) {
+	if (!cpufreq_kobj || !hotplug_kobj || !thermal_kobj || !apps_kobj || !sysinfo_kobj || !battery_kobj || !adaptive_policy_kobj) {
 		pr_err("%s: Can not allocate enough memory.\n", __func__);
 		return -ENOMEM;
 	}
@@ -471,6 +520,7 @@
 	ret |= sysfs_create_group(hotplug_kobj, &hotplug_attr_group);
 	ret |= sysfs_create_group(thermal_kobj, &thermal_attr_group);
 	ret |= sysfs_create_group(apps_kobj, &apps_attr_group);
+	ret |= sysfs_create_group(sysinfo_kobj, &sysinfo_attr_group);
 	ret |= sysfs_create_group(battery_kobj, &battery_attr_group);
 	ret |= sysfs_create_group(adaptive_policy_kobj, &adaptive_attr_group);
 
@@ -492,8 +546,12 @@
 	sysfs_remove_group(hotplug_kobj, &hotplug_attr_group);
 	sysfs_remove_group(thermal_kobj, &thermal_attr_group);
 	sysfs_remove_group(apps_kobj, &apps_attr_group);
+	sysfs_remove_group(sysinfo_kobj, &sysinfo_attr_group);
 	sysfs_remove_group(battery_kobj, &battery_attr_group);
 	sysfs_remove_group(adaptive_policy_kobj, &adaptive_attr_group);
+#ifdef CONFIG_HOTPLUG_CPU
+	unregister_hotcpu_notifier(&cpu_hotplug_notifier);
+#endif
 }
 
 module_init(pnpmgr_init);
