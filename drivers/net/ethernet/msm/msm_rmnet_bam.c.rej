--- drivers/net/ethernet/msm/msm_rmnet_bam.c	2013-06-24 02:50:44.000000000 -0600
+++ drivers/net/ethernet/msm/msm_rmnet_bam.c	2013-08-01 23:38:00.000000000 -0600
@@ -85,20 +85,6 @@
 	uint8_t in_reset;
 };
 
-#define TX_DT_TP_L0_INTERVAL 5000
-#define TX_DT_TP_L1_INTERVAL 200
-#define TX_DT_TP_L2_INTERVAL 200
-#define TX_DT_TP_L1_TIME 30000
-#define TX_DT_TP_MIN_SIZE (10*1024)
-#define TX_DT_TP_L1_SIZE (40*1024)
-static struct timer_list	tx_throttle_timer;
-static bool enable_trottle = false;
-static unsigned long current_tx_bytes = 0;
-static unsigned long previous_tx_bytes = 0;
-static unsigned int tx_throttle_counter = 0;
-static unsigned int tx_throttle_level = 0;
-static unsigned long tx_throttle_limited_size = 2048;
-
 #ifdef CONFIG_MSM_RMNET_DEBUG
 static unsigned long timeout_us;
 
@@ -213,136 +199,6 @@
 DEVICE_ATTR(timeout, 0664, timeout_show, timeout_store);
 #endif
 
-static void rmnet_bam_tx_dt (unsigned long param)
-{
-	struct net_device		*dev = (struct net_device *) param;
-	struct rmnet_private		*unet = netdev_priv(dev);
-	unsigned long		tp;
-
-	switch (tx_throttle_level) {
-	case 0:
-		tp = ((unet->stats.tx_bytes-previous_tx_bytes)/TX_DT_TP_L0_INTERVAL)*1000;
-
-		DBG2("previous tx bytes: %lu, current tx bytes: %lu, tp: %lu\n", previous_tx_bytes, (unet->stats.tx_bytes), tp);
-
-		current_tx_bytes = 0;
-		previous_tx_bytes = unet->stats.tx_bytes;
-
-		if ( tp < TX_DT_TP_MIN_SIZE ) {
-			DBG0("current tp less than: %d, not enable DT\n", TX_DT_TP_MIN_SIZE);
-			tx_throttle_timer.expires = jiffies + msecs_to_jiffies(TX_DT_TP_L0_INTERVAL);
-		}
-		else if ( tp < TX_DT_TP_L1_SIZE )
-		{
-			DBG0("enable DT, migrate to level 2\n");
-			tx_throttle_limited_size = TX_DT_TP_MIN_SIZE/(1000/TX_DT_TP_L2_INTERVAL);
-			enable_trottle = true;
-			tx_throttle_level = 2;
-			tx_throttle_timer.expires = jiffies + msecs_to_jiffies(TX_DT_TP_L2_INTERVAL);
-		}
-		else
-		{
-			DBG0("enable DT, migrate to level 1\n");
-			tx_throttle_limited_size = (tp/2)/(1000/TX_DT_TP_L1_INTERVAL);
-			enable_trottle = true;
-			tx_throttle_level = 1;
-			tx_throttle_timer.expires = jiffies + msecs_to_jiffies(TX_DT_TP_L1_INTERVAL);
-		}
-		add_timer(&tx_throttle_timer);
-		break;
-	case 1:
-		tp = ((unet->stats.tx_bytes-previous_tx_bytes)/TX_DT_TP_L1_INTERVAL)*1000;
-
-		DBG2("previous tx bytes: %lu, current tx bytes: %lu, tp: %lu\n", previous_tx_bytes, (unet->stats.tx_bytes), tp);
-
-		current_tx_bytes = 0;
-		previous_tx_bytes = unet->stats.tx_bytes;
-		netif_wake_queue (dev);
-
-		tx_throttle_counter++;
-		if ( tx_throttle_counter > (TX_DT_TP_L1_TIME/TX_DT_TP_L1_INTERVAL) ) {
-			DBG0("tx_throttle_counter: %d reach time: %d, migrate to level 2\n", tx_throttle_counter,TX_DT_TP_L1_INTERVAL);
-			tx_throttle_level = 2;
-			tx_throttle_limited_size = TX_DT_TP_MIN_SIZE/(1000/TX_DT_TP_L2_INTERVAL);
-			tx_throttle_timer.expires = jiffies + msecs_to_jiffies(TX_DT_TP_L2_INTERVAL);
-		}
-		else
-		{
-			tx_throttle_timer.expires = jiffies + msecs_to_jiffies(TX_DT_TP_L1_INTERVAL);
-		}
-		add_timer(&tx_throttle_timer);
-		break;
-	case 2:
-		tp = ((unet->stats.tx_bytes-previous_tx_bytes)/TX_DT_TP_L2_INTERVAL)*1000;
-
-		DBG2("previous tx bytes: %lu, current tx bytes: %lu, tp: %lu\n", previous_tx_bytes, (unet->stats.tx_bytes), tp);
-
-		current_tx_bytes = 0;
-		previous_tx_bytes = unet->stats.tx_bytes;
-		netif_wake_queue(dev);
-
-		tx_throttle_timer.expires = jiffies + msecs_to_jiffies(TX_DT_TP_L2_INTERVAL);
-		add_timer(&tx_throttle_timer);
-		break;
-	default:
-		DBG0("Invalid level.\n");
-	}
-}
-
-static ssize_t rmnet_bam_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-	DBG0("%s\n",__func__);
-
-	return sprintf(buf, "enable=%d, level=%d\n", enable_trottle, tx_throttle_level);
-}
-
-static ssize_t rmnet_bam_store(struct device *dev, struct device_attribute *attr, const char * buf, size_t count)
-{
-	int value;
-	struct net_device	*ndev = to_net_dev(dev);
-	struct rmnet_private		*unet = netdev_priv(ndev);
-	static int previous_value = 0;
-
-	if (sscanf(buf, "%d", &value) != 1)
-		return -EINVAL;
-
-	if (value == previous_value)
-		return count;
-	else
-		previous_value = value;
-
-	DBG0("%s enable=%d\n", __func__, value);
-
-	switch (value) {
-	case 0:
-		
-		del_timer_sync (&tx_throttle_timer);
-		tx_throttle_level = 0;
-		tx_throttle_counter = 0;
-		enable_trottle = false;
-		netif_wake_queue(ndev);
-		break;
-	case 1:
-		
-		tx_throttle_level = 0;
-		tx_throttle_counter = 0;
-		current_tx_bytes = 0;
-		previous_tx_bytes = unet->stats.tx_bytes;
-		init_timer(&tx_throttle_timer);
-		tx_throttle_timer.function = rmnet_bam_tx_dt;
-		tx_throttle_timer.data = (unsigned long) ndev;
-		tx_throttle_timer.expires = jiffies + msecs_to_jiffies(TX_DT_TP_L0_INTERVAL);
-		add_timer(&tx_throttle_timer);
-		break;
-	default:
-		DBG0("Invalid parameter.\n");
-	}
-
-	return count;
-}
-
-static DEVICE_ATTR(throttle, S_IRUSR | S_IWUSR, rmnet_bam_show, rmnet_bam_store);
-
 static int rmnet_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd);
 
 static __be16 rmnet_ip_type_trans(struct sk_buff *skb, struct net_device *dev)
@@ -471,26 +327,12 @@
 	dev_kfree_skb_any(skb);
 
 	spin_lock_irqsave(&p->tx_queue_lock, flags);
-	
-	if ( enable_trottle == false )
-	{
-		if (netif_queue_stopped(dev) &&
-			msm_bam_dmux_is_ch_low(p->ch_id)) {
-			DBG0("%s: Low WM hit, waking queue=%p\n",
-				__func__, skb);
-			netif_wake_queue(dev);
-		}
-	}
-	else
-	{
-		if (netif_queue_stopped(dev) && msm_bam_dmux_is_ch_low(p->ch_id) && (current_tx_bytes <= tx_throttle_limited_size))
-		{
-			DBG0("%s: Low WM hit, waking queue=%p, current_tx_bytes=%lu\n",
-				__func__, skb, current_tx_bytes);
-			netif_wake_queue(dev);
-		}
+	if (netif_queue_stopped(dev) &&
+		msm_bam_dmux_is_ch_low(p->ch_id)) {
+		DBG0("%s: Low WM hit, waking queue=%p\n",
+			__func__, skb);
+		netif_wake_queue(dev);
 	}
-	
 	spin_unlock_irqrestore(&p->tx_queue_lock, flags);
 }
 
@@ -650,23 +492,10 @@
 	}
 
 	spin_lock_irqsave(&p->tx_queue_lock, flags);
-	
-	if ( enable_trottle == false )
-	{
-		if (msm_bam_dmux_is_ch_full(p->ch_id)) {
-			netif_stop_queue(dev);
-			DBG0("%s: High WM hit, stopping queue=%p\n",    __func__, skb);
-		}
-	}
-	else
-	{
-		current_tx_bytes += skb->len;
-		if (msm_bam_dmux_is_ch_full(p->ch_id) || (current_tx_bytes > tx_throttle_limited_size)) {
-			netif_stop_queue(dev);
-			DBG0("%s: High WM hit, stopping queue=%p, current_tx_bytes=%lu\n",    __func__, skb, current_tx_bytes);
-		}
+	if (msm_bam_dmux_is_ch_full(p->ch_id)) {
+		netif_stop_queue(dev);
+		DBG0("%s: High WM hit, stopping queue=%p\n",    __func__, skb);
 	}
-	
 	spin_unlock_irqrestore(&p->tx_queue_lock, flags);
 
 exit:
@@ -951,11 +780,6 @@
 			return ret;
 		}
 
-		
-		if (device_create_file(d, &dev_attr_throttle))
-			continue;
-		
-
 #ifdef CONFIG_MSM_RMNET_DEBUG
 		if (device_create_file(d, &dev_attr_timeout))
 			continue;
