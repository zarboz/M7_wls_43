--- drivers/gpu/msm/kgsl_sharedmem.c	2013-06-24 02:50:46.000000000 -0600
+++ drivers/gpu/msm/kgsl_sharedmem.c	2013-08-01 23:38:02.000000000 -0600
@@ -53,8 +54,9 @@
 
 	tmp = (char*)((int)tmp + snprintf(tmp, PAGE_SIZE, "%lld %lld", priv->gputime.total, priv->gputime.busy));
 	for(i=0;i<KGSL_MAX_PWRLEVELS;i++)
-		tmp = (char*)( (int)tmp + snprintf(tmp, PAGE_SIZE - (int)(tmp-buf), " %lld %lld", priv->gputime_in_state[i].total, priv->gputime_in_state[i].busy));
-			tmp = (char*)((int)tmp + snprintf(tmp, PAGE_SIZE, "\n"));
+	tmp = (char*)( (int)tmp + snprintf(tmp, PAGE_SIZE - (int)(tmp-buf), " %lld %lld",
+				priv->gputime_in_state[i].total, priv->gputime_in_state[i].busy));
+	tmp = (char*)((int)tmp + snprintf(tmp, PAGE_SIZE, "\n"));
 	return (ssize_t)(tmp - buf);
 }
 
@@ -197,11 +195,9 @@
 		ret = sysfs_create_file(&private->kobj,
 			&mem_stats[i].max_attr.attr);
 	}
-
 #ifdef CONFIG_MSM_KGSL_GPU_USAGE
-	ret = sysfs_create_file(&private->kobj, &gpubusy.attr);
+ret = sysfs_create_file(&private->kobj, &gpubusy.attr);
 #endif
-
 }
 
 static int kgsl_drv_memstat_show(struct device *dev,
@@ -315,8 +311,8 @@
 #endif
 
 static int kgsl_ion_alloc_vmfault(struct kgsl_memdesc *memdesc,
-					struct vm_area_struct *vma,
-					struct vm_fault *vmf)
+				struct vm_area_struct *vma,
+				struct vm_fault *vmf)
 {
 	unsigned long offset, pfn;
 	int ret;
@@ -364,7 +359,8 @@
 			return -ENOMEM;
 		}
 		KGSL_STATS_ADD(memdesc->size, kgsl_driver.stats.vmalloc,
-		kgsl_driver.stats.vmalloc_max);
+			kgsl_driver.stats.vmalloc_max);
+		kgsl_driver.stats.pre_alloc_kernel += memdesc->size;
 	}
 
 	return 0;
@@ -418,15 +414,12 @@
 	struct scatterlist *sg;
 	int sglen = memdesc->sglen;
 
-	
-	if (memdesc->priv & KGSL_MEMDESC_GUARD_PAGE)
-		sglen--;
-
 	kgsl_driver.stats.page_alloc -= memdesc->size;
 
 	if (memdesc->hostptr) {
 		vunmap(memdesc->hostptr);
 		kgsl_driver.stats.vmalloc -= memdesc->size;
+		kgsl_driver.stats.page_alloc_kernel -= memdesc->size;
 	}
 	if (memdesc->sg)
 		for_each_sg(memdesc->sg, sg, sglen, i){
@@ -434,11 +427,8 @@
 				break;
 			__free_pages(sg_page(sg), get_order(sg->length));
 		}
-
 	if (memdesc->private)
 		kgsl_process_sub_stats(memdesc->private, KGSL_MEM_ENTRY_PAGE_ALLOC, memdesc->size);
-	else
-		kgsl_driver.stats.page_alloc_kernel -= memdesc->size;
 }
 
 static int kgsl_contiguous_vmflags(struct kgsl_memdesc *memdesc)
@@ -457,10 +447,6 @@
 		int i, count = 0;
 
 		
-		if (memdesc->priv & KGSL_MEMDESC_GUARD_PAGE)
-			sglen--;
-
-		
 		pages = vmalloc(npages * sizeof(struct page *));
 		if (!pages) {
 			KGSL_CORE_ERR("vmalloc(%d) failed\n",
@@ -610,63 +601,56 @@
 
 	page_size = (align >= ilog2(SZ_64K) && size >= SZ_64K)
 			? SZ_64K : PAGE_SIZE;
-
 	
-	kgsl_memdesc_set_align(memdesc, ilog2(page_size));
+	if (page_size != PAGE_SIZE)
+		kgsl_memdesc_set_align(memdesc, ilog2(page_size));
 
 
 	sglen_alloc = PAGE_ALIGN(size) >> PAGE_SHIFT;
 
-
-	if (kgsl_mmu_get_mmutype() == KGSL_MMU_TYPE_IOMMU)
-		sglen_alloc++;
-
 	memdesc->size = size;
 	memdesc->pagetable = pagetable;
 	memdesc->ops = &kgsl_page_alloc_ops;
 
-	memdesc->sg = kgsl_sg_alloc(sglen_alloc);
+	memdesc->sglen_alloc = sglen_alloc;
+	memdesc->sg = kgsl_sg_alloc(memdesc->sglen_alloc);
 
 	if (memdesc->sg == NULL) {
-		KGSL_CORE_ERR("vmalloc(%d) failed\n",
-			sglen_alloc * sizeof(struct scatterlist));
 		ret = -ENOMEM;
 		goto done;
 	}
 
 
-	pages = kmalloc(sglen_alloc * sizeof(struct page *), GFP_KERNEL);
+	pages = kmalloc(memdesc->sglen_alloc * sizeof(struct page *),
+		GFP_KERNEL);
 
 	if (pages == NULL) {
-		KGSL_CORE_ERR("kmalloc (%d) failed\n",
-			sglen_alloc * sizeof(struct page *));
 		ret = -ENOMEM;
 		goto done;
 	}
 
 	kmemleak_not_leak(memdesc->sg);
 
-	memdesc->sglen_alloc = sglen_alloc;
-	sg_init_table(memdesc->sg, sglen_alloc);
+	sg_init_table(memdesc->sg, memdesc->sglen_alloc);
 
 	len = size;
 
 	while (len > 0) {
 		struct page *page;
+		unsigned int gfp_mask = __GFP_HIGHMEM;
 		int j;
 
 		
 		if (len < page_size)
 			page_size = PAGE_SIZE;
 
-		if (page_size == PAGE_SIZE)
-			page = alloc_page(GFP_KERNEL | __GFP_HIGHMEM);
-		else {
-			page = alloc_pages(GFP_KERNEL | __GFP_HIGHMEM | __GFP_COMP |
-				__GFP_NO_COMPACT | __GFP_NOWARN | __GFP_NORETRY | __GFP_NO_KSWAPD,
-				get_order(page_size));
+		if (page_size != PAGE_SIZE)
+			gfp_mask |= __GFP_COMP | __GFP_NORETRY |
+				__GFP_NO_KSWAPD | __GFP_NOWARN;
+		else
+			gfp_mask |= GFP_KERNEL;
 
-		}
+		page = alloc_pages(gfp_mask, get_order(page_size));
 
 		if (page == NULL) {
 			if (page_size != PAGE_SIZE) {
@@ -689,21 +673,6 @@
 		len -= page_size;
 	}
 
-	
-
-	if (kgsl_mmu_get_mmutype() == KGSL_MMU_TYPE_IOMMU) {
-
-		if (kgsl_guard_page == NULL)
-			kgsl_guard_page = alloc_page(GFP_KERNEL | __GFP_ZERO |
-				__GFP_HIGHMEM);
-
-		if (kgsl_guard_page != NULL) {
-			sg_set_page(&memdesc->sg[sglen++], kgsl_guard_page,
-				PAGE_SIZE, 0);
-			memdesc->priv |= KGSL_MEMDESC_GUARD_PAGE;
-		}
-	}
-
 	memdesc->sglen = sglen;
 
 
@@ -769,19 +729,8 @@
 			    struct kgsl_pagetable *pagetable,
 			    size_t size)
 {
-	unsigned int protflags;
 	int ret = 0;
-
-	if (size == 0)
-		return -EINVAL;
-
-	protflags = GSL_PT_PAGE_RV;
-	if (!(memdesc->flags & KGSL_MEMFLAGS_GPUREADONLY))
-		protflags |= GSL_PT_PAGE_WV;
-
-	ret = _kgsl_sharedmem_page_alloc(memdesc, pagetable, size,
-		protflags);
-
+	ret = _kgsl_sharedmem_page_alloc(memdesc, pagetable, PAGE_ALIGN(size));
 	if (ret == 0 && private)
 		kgsl_process_add_stats(private, KGSL_MEM_ENTRY_PAGE_ALLOC, size);
 
@@ -802,31 +751,31 @@
 
 
 	
-	
+		
 
 	memdesc->size = size;
 	memdesc->pagetable = pagetable;
 	memdesc->ops = &kgsl_ion_alloc_ops;
 
-    if (kgsl_client == NULL) {
-        KGSL_CORE_ERR("kgsl_client is not initialized\n");
-        ret = -ENOMEM;
-        goto done;
-    }
-
-    handle = ion_alloc(kgsl_client, size, SZ_4K, 0x1 << ION_SF_HEAP_ID);
-    if (IS_ERR_OR_NULL(handle)) {
-        ret = -ENOMEM;
-        goto done;
-    }
+	if (kgsl_client == NULL) {
+		KGSL_CORE_ERR("kgsl_client is not initialized\n");
+		ret = -ENOMEM;
+		goto done;
+	}
+
+	handle = ion_alloc(kgsl_client, size, SZ_4K, 0x1 << ION_SF_HEAP_ID);
+	if (IS_ERR_OR_NULL(handle)) {
+		ret = -ENOMEM;
+		goto done;
+	}
 
 	memdesc->handle = handle;
 
-    if (ion_phys(kgsl_client, handle, &pa, &len)) {
-        printk("kgsl: ion_phys() failed\n");
-        ret = -ENOMEM;
-        goto done;
-    }
+	if (ion_phys(kgsl_client, handle, &pa, &len)) {
+		printk("kgsl: ion_phys() failed\n");
+		ret = -ENOMEM;
+		goto done;
+	}
 
 	ret = memdesc_sg_phys(memdesc, pa, memdesc->size);
 	if (ret)
@@ -874,17 +819,14 @@
 	BUG_ON(size == 0);
 	size = PAGE_ALIGN(size);
 
-	kgsl_driver.stats.pre_alloc_kernel += size;
 	ret = _kgsl_sharedmem_ion_alloc(memdesc, pagetable, size,
 		GSL_PT_PAGE_RV | GSL_PT_PAGE_WV);
 	if (!ret)
 		ret = kgsl_ion_alloc_map_kernel(memdesc);
 
-	if (ret) {
-		
-		kgsl_driver.stats.pre_alloc_kernel += size;
+	if (ret)
 		kgsl_sharedmem_free(memdesc);
-	}
+
 	return ret;
 }
 EXPORT_SYMBOL(kgsl_sharedmem_ion_alloc);
