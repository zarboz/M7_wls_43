--- drivers/gpu/msm/kgsl_device.h	2013-06-24 02:50:46.000000000 -0600
+++ drivers/gpu/msm/kgsl_device.h	2013-08-01 23:38:02.000000000 -0600
@@ -177,7 +183,6 @@
 	u32 snapshot_timestamp;	
 	int snapshot_frozen;	
 	struct kobject snapshot_kobj;
-	int snapshot_no_panic;  
 
 	struct list_head snapshot_obj_list;
 
@@ -219,7 +227,6 @@
 	.hwaccess_gate = COMPLETION_INITIALIZER((_dev).hwaccess_gate),\
 	.suspend_gate = COMPLETION_INITIALIZER((_dev).suspend_gate),\
 	.ft_gate = COMPLETION_INITIALIZER((_dev).ft_gate),\
-	.ts_notifier_list = ATOMIC_NOTIFIER_INIT((_dev).ts_notifier_list),\
 	.idle_check_ws = __WORK_INITIALIZER((_dev).idle_check_ws,\
 			kgsl_idle_check),\
 	.ts_expired_ws  = __WORK_INITIALIZER((_dev).ts_expired_ws,\
@@ -274,8 +288,6 @@
 #endif
 };
 
-
-
 struct kgsl_device_private {
 	struct kgsl_device *device;
 	struct kgsl_process_private *process_priv;
@@ -287,7 +299,9 @@
 };
 
 struct kgsl_device *kgsl_get_device(int dev_idx);
-void kgsl_dump_contextpid(struct idr *context_idr);
+
+int kgsl_add_event(struct kgsl_device *device, u32 id, u32 ts,
+	kgsl_event_func func, void *priv, void *owner);
 
 static inline void kgsl_process_add_stats(struct kgsl_process_private *priv,
 	unsigned int type, size_t size)
@@ -406,30 +406,61 @@
 	return pdev->dev.platform_data;
 }
 
+void kgsl_context_destroy(struct kref *kref);
+
 static inline void
-kgsl_context_get(struct kgsl_context *context)
+kgsl_context_put(struct kgsl_context *context)
 {
-	kref_get(&context->refcount);
+	if (context)
+		kref_put(&context->refcount, kgsl_context_destroy);
 }
 
-void kgsl_context_destroy(struct kref *kref);
+static inline void _kgsl_context_get(struct kgsl_context *context)
+{
+	if (context)
+		kref_get(&context->refcount);
+}
 
-static inline void
-kgsl_context_put(struct kgsl_context *context)
+static inline struct kgsl_context *kgsl_context_get(struct kgsl_device *device,
+		uint32_t id)
 {
-	kref_put(&context->refcount, kgsl_context_destroy);
+	struct kgsl_context *context = NULL;
+
+	rcu_read_lock();
+	context = idr_find(&device->context_idr, id);
+
+	_kgsl_context_get(context);
+
+	rcu_read_unlock();
+	return context;
 }
 
-static inline void
-kgsl_active_count_put(struct kgsl_device *device)
+static inline struct kgsl_context *kgsl_context_get_owner(
+		struct kgsl_device_private *dev_priv, uint32_t id)
 {
-	if (device->active_cnt == 1)
-		INIT_COMPLETION(device->suspend_gate);
+	struct kgsl_context *context;
 
-	device->active_cnt--;
+	context = kgsl_context_get(dev_priv->device, id);
 
-	if (device->active_cnt == 0)
-		complete(&device->suspend_gate);
+	
+	if (context && context->dev_priv != dev_priv) {
+		kgsl_context_put(context);
+		return NULL;
+	}
+
+	return context;
+}
+
+static inline void kgsl_context_cancel_events(struct kgsl_device *device,
+	struct kgsl_context *context)
+{
+	kgsl_signal_events(device, context, KGSL_EVENT_CANCELLED);
+}
+
+static inline void kgsl_cancel_events_timestamp(struct kgsl_device *device,
+	struct kgsl_context *context, unsigned int timestamp)
+{
+	kgsl_signal_event(device, context, timestamp, KGSL_EVENT_CANCELLED);
 }
 
 #endif  
