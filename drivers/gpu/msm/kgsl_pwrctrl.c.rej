--- drivers/gpu/msm/kgsl_pwrctrl.c	2013-06-24 02:50:46.000000000 -0600
+++ drivers/gpu/msm/kgsl_pwrctrl.c	2013-08-01 23:38:02.000000000 -0600
@@ -90,7 +91,7 @@
 	gpufreq_stat.last_time = cur_time;
 
 	spin_unlock(&gpufreq_stats_lock);
-return 0;
+	return 0;
 }
 
 static void update_clk_statistics(struct kgsl_device *device,
@@ -551,12 +552,7 @@
 {
 	int ret;
 	struct kgsl_device *device = kgsl_device_from_dev(dev);
-	struct kgsl_clk_stats *clkstats;
-
-	if(device == NULL)
-		return 0;
-	clkstats = &device->pwrctrl.clk_stats;
-
+	struct kgsl_clk_stats *clkstats = &device->pwrctrl.clk_stats;
 	ret = snprintf(buf, PAGE_SIZE, "%7d %7d\n",
 			clkstats->on_time_old, clkstats->elapsed_old);
 	if (!test_bit(KGSL_PWRFLAGS_AXI_ON, &device->pwrctrl.power_flags)) {
@@ -567,8 +563,8 @@
 }
 
 static int kgsl_pwrctrl_gpubusy_time_show(struct device *dev,
-					struct device_attribute *attr,
-					char *buf)
+				struct device_attribute *attr,
+				char *buf)
 {
 	int ret;
 	struct kgsl_device *device = kgsl_device_from_dev(dev);
@@ -587,45 +583,38 @@
 }
 
 static int kgsl_pwrctrl_gpubusy_time_in_state_show(struct device *dev,
-					struct device_attribute *attr,
-					char *buf)
+				struct device_attribute *attr,
+				char *buf)
 {
 	int i;
 	char* tmp = buf;
 	struct kgsl_device *device = kgsl_device_from_dev(dev);
-	struct platform_device *pdev;
-	struct kgsl_device_platform_data *pdata;
+	struct platform_device *pdev = container_of(device->parentdev, struct platform_device, dev);
+	struct kgsl_device_platform_data *pdata = pdev->dev.platform_data;
 	s64 system_time, busy_time;
 
-	if(device == NULL)
-		return 0;
-	pdev = container_of(device->parentdev, struct platform_device, dev);
-	pdata = pdev->dev.platform_data;
-
 	for(i=0;i<pdata->num_levels;i++) {
 		system_time = device->gputime_in_state[i].total;
 		do_div(system_time, 1000);
 		busy_time = device->gputime_in_state[i].busy;
 		do_div(busy_time, 1000);
-		tmp = (char*)( (int)tmp + snprintf(tmp, PAGE_SIZE - (int)(tmp-buf), "%d %lld %lld\n", pdata->pwrlevel[i].gpu_freq, system_time, busy_time));
+		tmp = (char*)( (int)tmp + snprintf(tmp, PAGE_SIZE - (int)(tmp-buf), "%d %lld %lld\n",
+					pdata->pwrlevel[i].gpu_freq, system_time, busy_time));
 	}
 	return (ssize_t)(tmp - buf);
 }
 
+
 static int kgsl_pwrctrl_gputop_show(struct device *dev,
 					struct device_attribute *attr,
 					char *buf)
 {
 	int ret;
 	struct kgsl_device *device = kgsl_device_from_dev(dev);
-	struct kgsl_clk_stats *clkstats;
+	struct kgsl_clk_stats *clkstats = &device->pwrctrl.clk_stats;
 	int i = 0;
 	char *ptr = buf;
 
-	if(device == NULL)
-		return 0;
-	clkstats = &device->pwrctrl.clk_stats;
-
 	ret = snprintf(buf, PAGE_SIZE, "%7d %7d ", clkstats->on_time_old,
 					clkstats->elapsed_old);
 	for (i = 0, ptr += ret; i < device->pwrctrl.num_pwrlevels;
@@ -683,10 +680,12 @@
 	if (test_bit(KGSL_PWRFLAGS_CLK_ON, &device->pwrctrl.power_flags) || (device->state == KGSL_STATE_NAP))
 		gpufreq_stats_update(0, device->pwrctrl.active_pwrlevel, device->pwrctrl.active_pwrlevel);
 
+	spin_lock(&gpufreq_stats_lock);
 	for (i = 0; i < device->pwrctrl.num_pwrlevels; i++) {
 		len += sprintf(buf + len, "%u %llu\n", device->pwrctrl.pwrlevels[i].gpu_freq,
 			(unsigned long long)jiffies_to_clock_t(gputime_in_state[i]));
 	}
+	spin_unlock(&gpufreq_stats_lock);
 
 	return len;
 }
@@ -716,6 +715,9 @@
 DEVICE_ATTR(num_pwrlevels, 0444,
 	kgsl_pwrctrl_num_pwrlevels_show,
 	NULL);
+DEVICE_ATTR(reset_count, 0444,
+	kgsl_pwrctrl_reset_count_show,
+	NULL);
 DEVICE_ATTR(gpubusy_time, 0644, kgsl_pwrctrl_gpubusy_time_show, NULL);
 DEVICE_ATTR(gpubusy_time_in_state, 0644, kgsl_pwrctrl_gpubusy_time_in_state_show, NULL);
 DEVICE_ATTR(gputime_in_state, 0444, kgsl_pwrctrl_gputime_in_state_show, NULL);
@@ -732,7 +734,7 @@
 	&dev_attr_min_pwrlevel,
 	&dev_attr_thermal_pwrlevel,
 	&dev_attr_num_pwrlevels,
-
+	&dev_attr_reset_count,
 	
 	&dev_attr_gpubusy_time,
 	&dev_attr_gpubusy_time_in_state,
@@ -756,12 +758,6 @@
 	unsigned int on_time = 0;
 	int i;
 	int num_pwrlevels = device->pwrctrl.num_pwrlevels - 1;
-
-	if(num_pwrlevels < 0){
-		KGSL_PWR_ERR(device,"device->pwrctrl.num_pwrlevels: %d < 0 index error",num_pwrlevels);
-		return;
-	}
-
 	
 	for (i = 0; i < num_pwrlevels; i++) {
 		clkstats->old_clock_time[i] = clkstats->clock_time[i];
@@ -1147,54 +1150,26 @@
 	}
 }
 
+
+/**
+ * kgsl_pre_hwaccess - Enforce preconditions for touching registers
+ * @device: The device
+ *
+ * This function ensures that the correct lock is held and that the GPU
+ * clock is on immediately before a register is read or written. Note
+ * that this function does not check active_cnt because the registers
+ * must be accessed during device start and stop, when the active_cnt
+ * may legitimately be 0.
+ */
 void kgsl_pre_hwaccess(struct kgsl_device *device)
 {
+	
 	BUG_ON(!mutex_is_locked(&device->mutex));
-	switch (device->state) {
-	case KGSL_STATE_ACTIVE:
-		return;
-	case KGSL_STATE_NAP:
-	case KGSL_STATE_SLEEP:
-	case KGSL_STATE_SLUMBER:
-		kgsl_pwrctrl_wake(device);
-		break;
-	case KGSL_STATE_SUSPEND:
-		kgsl_check_suspended(device);
-		break;
-	case KGSL_STATE_INIT:
-	case KGSL_STATE_HUNG:
-	case KGSL_STATE_DUMP_AND_FT:
-		if (test_bit(KGSL_PWRFLAGS_CLK_ON,
-					 &device->pwrctrl.power_flags))
-			break;
-		else
-			KGSL_PWR_ERR(device,
-					"hw access while clocks off from state %d\n",
-					device->state);
-		break;
-	default:
-		KGSL_PWR_ERR(device, "hw access while in unknown state %d\n",
-					 device->state);
-		break;
-	}
+	
+	BUG_ON(!test_bit(KGSL_PWRFLAGS_CLK_ON, &device->pwrctrl.power_flags));
 }
 EXPORT_SYMBOL(kgsl_pre_hwaccess);
 
-void kgsl_check_suspended(struct kgsl_device *device)
-{
-	if (device->requested_state == KGSL_STATE_SUSPEND ||
-				device->state == KGSL_STATE_SUSPEND) {
-		mutex_unlock(&device->mutex);
-		wait_for_completion(&device->hwaccess_gate);
-		mutex_lock(&device->mutex);
-	} else if (device->state == KGSL_STATE_DUMP_AND_FT) {
-		mutex_unlock(&device->mutex);
-		wait_for_completion(&device->ft_gate);
-		mutex_lock(&device->mutex);
-	} else if (device->state == KGSL_STATE_SLUMBER)
-		kgsl_pwrctrl_wake(device);
-}
-
 static int
 _nap(struct kgsl_device *device)
 {
