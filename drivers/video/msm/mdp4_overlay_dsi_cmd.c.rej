--- drivers/video/msm/mdp4_overlay_dsi_cmd.c	2013-06-24 02:50:46.000000000 -0600
+++ drivers/video/msm/mdp4_overlay_dsi_cmd.c	2013-08-01 23:38:01.000000000 -0600
@@ -69,12 +65,9 @@
 	int vsync_enabled;
 	int clk_enabled;
 	int clk_control;
-	int watchdog;
 	ktime_t vsync_time;
-	struct work_struct vsync_work;
+	u32 last_vsync_ms;
 	struct work_struct clk_work;
-	
-	int temp_cnt;
 } vsync_ctrl_db[MAX_CONTROLLER];
 
 static void vsync_irq_enable(int intr, int term)
@@ -281,19 +290,20 @@
 	vctrl = &vsync_ctrl_db[0];
 
 	mutex_lock(&vctrl->update_lock);
-	if(vctrl->temp_cnt > 0)
-		pr_info("[DISP]%s :update_lock done cnt=%d\n",__func__,vctrl->temp_cnt--);
-
 	undx =  vctrl->update_ndx;
 	vp = &vctrl->vlist[undx];
 	pipe = vctrl->base_pipe;
-	mixer = pipe->mixer_num;
-
-	if (vp->update_cnt == 0) {
+	if (pipe == NULL) {
+		pr_err("%s: NO base pipe\n", __func__);
 		mutex_unlock(&vctrl->update_lock);
-		return cnt;
+		return 0;
 	}
 
+	mixer = pipe->mixer_num;
+
+	mdp_update_pm(vctrl->mfd, vctrl->vsync_time);
+
+
 	vctrl->update_ndx++;
 	vctrl->update_ndx &= 0x01;
 	vp->update_cnt = 0;     
@@ -395,17 +413,14 @@
 	pr_debug("%s: kickoff, pid=%d\n", __func__, current->pid);
 	
 	mdp4_stat.kickoff_ov0++;
-	outpdw(MDP_BASE + 0x0004, 0);
-	mb();
+	mdp_pipe_kickoff_simplified(MDP_OVERLAY0_TERM);
+	mb(); 
 	spin_unlock_irqrestore(&vctrl->spin_lock, flags);
 
 	mdp4_stat.overlay_commit[pipe->mixer_num]++;
 
-	if (wait) {
-		long long tick;
-
-		mdp4_dsi_cmd_wait4vsync(cndx, &tick);
-	}
+	if (wait)
+		mdp4_dsi_cmd_wait4vsync(0);
 
 	return cnt;
 }
@@ -416,26 +431,15 @@
 {
 	struct vsycn_ctrl *vctrl;
 	unsigned long flags;
-	int clk_set_on = 0;
 	int cndx = 0;
+	int clk_set_on = 0;
 
 	vctrl = &vsync_ctrl_db[cndx];
-	pr_debug("%s: clk_enabled=%d vsync_enabled=%d req=%d suspend=%d\n",
-	    __func__, vctrl->clk_enabled, vctrl->vsync_enabled, enable,
-	    atomic_read(&vctrl->suspend));
-
-	
-	if (atomic_read(&vctrl->suspend)) {
-		if (vctrl->vsync_enabled)
-			pr_warning("[DISP] %s: suspended, no more vsync event ctrl\n", __func__);
-		enable = 0;
-	}
-	if (enable && (mdp4_overlay_dsi_state_get() <= ST_DSI_SUSPEND)) {
-		pr_info("[DISP] %s: dsi is suspend, req=%d\n", __func__, enable);
-		enable = 0;
-	}
 
 	mutex_lock(&vctrl->update_lock);
+	pr_debug("%s: clk_enabled=%d vsync_enabled=%d req=%d\n", __func__,
+		vctrl->clk_enabled, vctrl->vsync_enabled, enable);
+
 	if (vctrl->vsync_enabled == enable) {
 		mutex_unlock(&vctrl->update_lock);
 		return;
@@ -726,12 +726,9 @@
 	if (vctrl->inited)
 		return;
 
-	vctrl->temp_cnt = 5;
 	vctrl->inited = 1;
 	vctrl->update_ndx = 0;
-	vctrl->watchdog = 0;
 	mutex_init(&vctrl->update_lock);
-	pr_info("[DISP]%s update_lock init done\n",__func__);
 	init_completion(&vctrl->ov_comp);
 	init_completion(&vctrl->dmap_comp);
 	init_completion(&vctrl->vsync_comp);
@@ -842,12 +846,12 @@
 						pipe->src_width, bpp);
 	} else {
 		 
-		pipe->src_height = mfd->ovr_dst_height;	
-		pipe->src_width = mfd->ovr_dst_width;	
-		pipe->src_h = mfd->ovr_src_height;	
-		pipe->src_w = mfd->ovr_src_width;	
-		pipe->dst_h = mfd->ovr_dst_height;	
-		pipe->dst_w = mfd->ovr_dst_width;	
+		pipe->src_height = fbi->var.yres;
+		pipe->src_width = fbi->var.xres;
+		pipe->src_h = fbi->var.yres;
+		pipe->src_w = fbi->var.xres;
+		pipe->dst_h = fbi->var.yres;
+		pipe->dst_w = fbi->var.xres;
 		pipe->srcp0_ystride = fbi->fix.line_length;
 	}
 	pipe->src_y = 0;
@@ -897,15 +901,20 @@
 		pipe = vctrl->base_pipe;
 	}
 
-	if (mfd->panel_info.read_pointer)
-		MDP_OUTP(MDP_BASE + 0x021c, mfd->panel_info.read_pointer); 
-	else
-		MDP_OUTP(MDP_BASE + 0x021c, 100); 
+	
+	mdp4_mipi_vsync_enable(mfd, pipe, 0);
+
+	mdp4_overlay_mdp_pipe_req(pipe, mfd);
+	mdp4_calc_blt_mdp_bw(mfd, pipe);
+
+	MDP_OUTP(MDP_BASE + 0x021c, 10); 
 
 	MDP_OUTP(MDP_BASE + 0x000a0, 0x10);
 	
 	MDP_OUTP(MDP_BASE + 0x000a4, 0x00);
 
+	mdp4_overlay_solidfill_init(pipe);
+
 	mdp4_overlay_setup_pipe_addr(mfd, pipe);
 
 	mdp4_overlay_rgb_setup(pipe);
@@ -967,12 +976,12 @@
 					pipe->src_width, bpp);
 	} else {
 		 
-		pipe->src_height = mfd->ovr_dst_height;	
-		pipe->src_width = mfd->ovr_dst_width;	
-		pipe->src_h = mfd->ovr_src_height;	
-		pipe->src_w = mfd->ovr_src_width;	
-		pipe->dst_h = mfd->ovr_dst_height;	
-		pipe->dst_w = mfd->ovr_dst_width;	
+		pipe->src_height = fbi->var.yres;
+		pipe->src_width = fbi->var.xres;
+		pipe->src_h = fbi->var.yres;
+		pipe->src_w = fbi->var.xres;
+		pipe->dst_h = fbi->var.yres;
+		pipe->dst_w = fbi->var.xres;
 		pipe->srcp0_ystride = fbi->fix.line_length;
 	}
 	pipe->src_y = 0;
@@ -1045,7 +1057,10 @@
 
 	atomic_set(&vctrl->suspend, 0);
 
+	mutex_unlock(&mfd->dma->ov_mutex);
+
 	pr_debug("%s-:\n", __func__);
+
 	return ret;
 }
 
@@ -1056,130 +1071,119 @@
 	struct msm_fb_data_type *mfd;
 	struct vsycn_ctrl *vctrl;
 	struct mdp4_overlay_pipe *pipe;
-	int need_wait = 0, cnt;
+	struct vsync_update *vp;
+	int undx;
+	int need_wait, cnt;
 	unsigned long flags;
+	int mixer = 0;
 
 	pr_debug("%s+: pid=%d\n", __func__, current->pid);
 
 	mfd = (struct msm_fb_data_type *)platform_get_drvdata(pdev);
 
+	mutex_lock(&mfd->dma->ov_mutex);
+
 	vctrl = &vsync_ctrl_db[cndx];
 	pipe = vctrl->base_pipe;
 	if (pipe == NULL) {
 		pr_err("%s: NO base pipe\n", __func__);
+		mutex_unlock(&mfd->dma->ov_mutex);
 		return ret;
 	}
 
+	need_wait = 0;
 	mutex_lock(&vctrl->update_lock);
-	atomic_set(&vctrl->suspend, 1);
+
+	complete_all(&vctrl->vsync_comp);
 
 	pr_debug("%s: clk=%d pan=%d\n", __func__,
 			vctrl->clk_enabled, vctrl->pan_display);
-	if (vctrl->clk_enabled) {
-		pr_info("[DISP] %s: clk is still enabled, need wait for vsync ctrl off\n", __func__);
+	if (vctrl->clk_enabled)
 		need_wait = 1;
-		spin_lock_irqsave(&vctrl->spin_lock, flags);
-		vctrl->vsync_enabled = 0;
-		vctrl->expire_tick = 2 * VSYNC_EXPIRE_TICK;
-		spin_unlock_irqrestore(&vctrl->spin_lock, flags);
-	}
 	mutex_unlock(&vctrl->update_lock);
 
 	cnt = 0;
 	if (need_wait) {
-		while (vctrl->clk_enabled){
+		while (vctrl->clk_enabled) {
 			msleep(20);
 			cnt++;
-			if (0 == (cnt & 0x7f)) { 
-				pr_info("%s: vctrl={pan:%d,clk_ctrl:%d,clk_en:%d,vsync_en:%d, exp_tick=%d}\n", __func__,
-				    vctrl->pan_display, vctrl->clk_control,
-				    vctrl->clk_enabled, vctrl->vsync_enabled, vctrl->expire_tick);
-				pr_info("%s: mdp_intr: %x\n", __func__, mdp_intr_mask);
-			}
+			if (cnt > 10)
+				break;
 		}
 	}
 
-	
-	pr_info("%s: mdp clocks are disabled with cnt=%d\n", __func__, cnt);
-
-	complete_all(&vctrl->vsync_comp);
-	vctrl->wait_vsync_cnt = 0;
-
-	
-	mdp4_overlay_unset_mixer(pipe->mixer_num);
-	mdp4_mixer_stage_down(pipe, 1);
-	mdp4_overlay_pipe_free(pipe);
-	vctrl->base_pipe = NULL;
-
-	pr_debug("%s-:\n", __func__);
+	if (cnt > 10) {
+		spin_lock_irqsave(&vctrl->spin_lock, flags);
+		vctrl->clk_control = 0;
+		vctrl->clk_enabled = 0;
+		vctrl->expire_tick = 0;
+		spin_unlock_irqrestore(&vctrl->spin_lock, flags);
+		mipi_dsi_clk_cfg(0);
+		mdp_clk_ctrl(0);
+		pr_err("%s: Error, SET_CLK_OFF by force\n", __func__);
+	}
 
-	return ret;
-}
+	if (vctrl->vsync_enabled) {
+		vsync_irq_disable(INTR_PRIMARY_RDPTR, MDP_PRIM_RDPTR_TERM);
+		vctrl->vsync_enabled = 0;
+	}
 
-void mdp_dsi_cmd_overlay_suspend(struct msm_fb_data_type *mfd)
-{
-	int cndx = 0;
-	struct vsycn_ctrl *vctrl;
-	struct mdp4_overlay_pipe *pipe;
+	undx =  vctrl->update_ndx;
+	vp = &vctrl->vlist[undx];
+	if (vp->update_cnt) {
+		pr_warn("%s: update_cnt=%d\n", __func__, vp->update_cnt);
+		mdp4_dsi_cmd_pipe_clean(vp);
+	}
 
-	vctrl = &vsync_ctrl_db[cndx];
-	pipe = vctrl->base_pipe;
-	
 	if (pipe) {
+		
+		mixer = pipe->mixer_num;
+		mdp4_overlay_unset_mixer(mixer);
 		if (mfd->ref_cnt == 0) {
 			
 			if (pipe->pipe_type == OVERLAY_TYPE_BF)
 				mdp4_overlay_borderfill_stage_down(pipe);
 
 			
-			mdp4_overlay_unset_mixer(pipe->mixer_num);
+			pipe = vctrl->base_pipe;
+			mdp4_mixer_stage_down(pipe, 1);
+			mdp4_overlay_pipe_free(pipe, 1);
 			vctrl->base_pipe = NULL;
 		} else {
+			
 			mdp4_mixer_stage_down(pipe, 1);
 			mdp4_overlay_iommu_pipe_free(pipe->pipe_ndx, 1);
 		}
 	}
-}
 
-void mdp4_dsi_cmd_overlay(struct msm_fb_data_type *mfd)
-{
-	int cndx = 0;
-	struct vsycn_ctrl *vctrl;
-	struct mdp4_overlay_pipe *pipe;
-	unsigned long flags;
-	int clk_set_on = 0;
+	atomic_set(&vctrl->suspend, 1);
 
-	vctrl = &vsync_ctrl_db[cndx];
+	mdp4_overlay_iommu_unmap_freelist(mixer);
+	mdp4_overlay_iommu_unmap_freelist(mixer);
 
-	if (!mfd->panel_power_on)
-		return;
+	mutex_unlock(&mfd->dma->ov_mutex);
 
-	pipe = vctrl->base_pipe;
-	if (pipe == NULL) {
-		pr_err("%s: NO base pipe\n", __func__);
-		return;
-	}
+	pr_debug("%s-:\n", __func__);
+	return ret;
+}
 
-	mutex_lock(&vctrl->update_lock);
-	if(vctrl->temp_cnt > 0)
-		pr_info("[DISP]%s :update_lock done cnt=%d\n",__func__,vctrl->temp_cnt);
+static int mdp4_dsi_cmd_clk_check(struct vsycn_ctrl *vctrl)
+{
+	int clk_set_on = 0;
+	unsigned long flags;
 
 	if (atomic_read(&vctrl->suspend)) {
-		mutex_unlock(&vctrl->update_lock);
-		pr_warning("[DISP] %s: suspended, no more pan display\n", __func__);
-		return;
+		pr_err("%s: suspended, no more pan display\n", __func__);
+		return -EPERM;
 	}
 
 	spin_lock_irqsave(&vctrl->spin_lock, flags);
-	vctrl->pan_display++;
 	vctrl->clk_control = 0;
-
-	if (vctrl->clk_enabled == 0) {
+	vctrl->pan_display++;
+	if (!vctrl->clk_enabled) {
 		clk_set_on = 1;
 		vctrl->clk_enabled = 1;
 		vctrl->expire_tick = VSYNC_EXPIRE_TICK;
-	} else if (vctrl->expire_tick && vctrl->expire_tick < VSYNC_EXPIRE_TICK) {
-		vctrl->expire_tick = VSYNC_EXPIRE_TICK;
 	}
 	spin_unlock_irqrestore(&vctrl->spin_lock, flags);
 
@@ -1221,9 +1247,8 @@
 	}
 
 	mdp4_overlay_mdp_perf_upd(mfd, 1);
-
-	mutex_lock(&mfd->dma->ov_mutex);
 	mdp4_dsi_cmd_pipe_commit(cndx, 0);
-	mutex_unlock(&mfd->dma->ov_mutex);
 	mdp4_overlay_mdp_perf_upd(mfd, 0);
+	mutex_unlock(&mfd->dma->ov_mutex);
+
 }
