--- drivers/i2c/chips/bma250_bosch.c	2013-06-24 02:50:46.000000000 -0600
+++ drivers/i2c/chips/bma250_bosch.c	2013-08-01 23:38:02.000000000 -0600
@@ -69,12 +71,19 @@
 
 	struct bma250_platform_data *pdata;
 	short offset_buf[3];
+
+#ifdef CONFIG_SIG_MOTION
+	struct input_dev *input_sig_motion;
+	atomic_t en_sig_motion;
+	int ref_count;
+	struct wake_lock sig_wake_lock;
+#endif
 };
 
 struct bma250_data *gdata;
 
 #ifdef CONFIG_CIR_ALWAYS_READY
-#define BMA250_ENABLE_INT1 1
+#define CONFIG_BMA250_ENABLE_INT1 1
 static int cir_flag = 0;
 static int power_key_pressed = 0;
 #endif
@@ -161,12 +210,40 @@
 {
 	int comres = 0;
 	unsigned char data1;
+	struct bma250_data *bma250 = i2c_get_clientdata(client);
 
 #ifdef CONFIG_CIR_ALWAYS_READY
 	if(cir_flag && Mode == BMA250_MODE_SUSPEND) {
 	    return 0;
 	} else {
 #endif
+	I("%s++: mode = %d, bma250->ref_count = %d\n", __func__, Mode, bma250->ref_count);
+
+	mutex_lock(&bma250->mode_mutex);
+	if (BMA250_MODE_SUSPEND == Mode) {
+		if (bma250->ref_count > 0) {
+			bma250->ref_count--;
+			if (0 < bma250->ref_count) {
+				mutex_unlock(&bma250->mode_mutex);
+				I("%s--11: mode = %d, bma250->ref_count = %d\n", __func__, Mode, bma250->ref_count);
+				return 0;
+			}
+		}
+
+	} else {
+		bma250->ref_count++;
+		if (1 < bma250->ref_count) {
+			mutex_unlock(&bma250->mode_mutex);
+			I("%s--22: mode = %d, bma250->ref_count = %d\n", __func__, Mode, bma250->ref_count);
+			return 0;
+		}
+
+		
+		if (bma250->pdata->power_LPM) {
+			D("%s: Set to High Power mode!!\n", __func__);
+			bma250->pdata->power_LPM(0);
+		}
+	}
 
 	if (Mode < 3) {
 		comres = bma250_smbus_read_byte(client,
@@ -1845,10 +1940,10 @@
 	int pre_enable = atomic_read(&bma250->enable);
 	int i = 0;
 
+	I("%s: enable = %d\n", __func__, enable);
+
 	mutex_lock(&bma250->enable_mutex);
 	if (enable) {
-		if (bma250->pdata->power_LPM)
-			bma250->pdata->power_LPM(0);
 
 		if (pre_enable == 0) {
 			bma250_set_mode(bma250->bma250_client,
@@ -1865,14 +1960,6 @@
 			cancel_delayed_work_sync(&bma250->work);
 			atomic_set(&bma250->enable, 0);
 		}
-
-#ifdef CONFIG_CIR_ALWAYS_READY
-		if (bma250->pdata->power_LPM && !cir_flag)
-#else
-
-		if (bma250->pdata->power_LPM)
-#endif
-			bma250->pdata->power_LPM(1);
 	}
 
 	if ((bma250->pdata->gs_kvalue & (0x67 << 24)) != (0x67 << 24)) {
@@ -3160,8 +3367,7 @@
 };
 
 
-#ifdef CONFIG_CIR_ALWAYS_READY
-#if defined(BMA250_ENABLE_INT1) || defined(BMA250_ENABLE_INT2)
+#if defined(CONFIG_BMA250_ENABLE_INT1) || defined(BMA250_ENABLE_INT2)
 unsigned char *orient_st[] = {"upward looking portrait upright",   \
 	"upward looking portrait upside-down",   \
 		"upward looking landscape left",   \
@@ -3223,6 +3424,7 @@
 	unsigned char tempvalue;
 	struct bma250_data *data;
 	struct input_dev *dev;
+	struct input_dev *dev_sig_motion;
 #ifdef CONFIG_CIR_ALWAYS_READY
 	struct input_dev *dev_cir;
 	struct class *bma250_powerkey_class = NULL;
@@ -3382,11 +3606,22 @@
 	}
 #endif
 
+#ifdef CONFIG_SIG_MOTION
+	err = input_register_device(dev_sig_motion);
+	if (err < 0) {
+	    goto err_register_input_device_sig_motion;
+	}
+#endif
+
 	data->input = dev;
 #ifdef CONFIG_CIR_ALWAYS_READY
 	data->input_cir = dev_cir;
 #endif
 
+#ifdef CONFIG_SIG_MOTION
+	data->input_sig_motion = dev_sig_motion;
+#endif
+
 #ifdef HTC_ATTR
 
 
@@ -3472,12 +3714,21 @@
 	class_destroy(bma250_powerkey_class);
 #endif
 err_create_class:
+
+#ifdef CONFIG_SIG_MOTION
+	input_unregister_device(data->input_sig_motion);
+err_register_input_device_sig_motion:
+#endif
+
 #ifdef CONFIG_CIR_ALWAYS_READY
 	input_unregister_device(data->input_cir);
 err_register_input_cir_device:
 #endif
 	input_unregister_device(data->input);
 err_register_input_device:
+#ifdef CONFIG_SIG_MOTION
+	input_free_device(dev_sig_motion);
+#endif
 #ifdef CONFIG_CIR_ALWAYS_READY
 	input_free_device(dev_cir);
 #endif
@@ -3554,18 +3805,7 @@
 		cancel_delayed_work_sync(&data->work);
 	}
 	mutex_unlock(&data->enable_mutex);
-
-#ifdef CONFIG_CIR_ALWAYS_READY
-	
-	if (data && (data->pdata->power_LPM) && !cir_flag){
-#else
-
-	if (data && (data->pdata->power_LPM)){
-#endif
-	    I("suspend + power_LPM\n");
-		data->pdata->power_LPM(1);
-	}
-
+	I("%s--\n", __func__);
 	return 0;
 }
 
